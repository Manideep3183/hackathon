version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aura-postgres
    environment:
      POSTGRES_DB: aura_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: aura-backend
    environment:
      # Database
      POSTGRES_SERVER: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_DB: aura_db
      POSTGRES_PORT: 5432
      
      # API Keys (to be set in .env file)
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      PINECONE_API_KEY: ${PINECONE_API_KEY}
      BEARER_TOKEN: ${BEARER_TOKEN}
      
      # Pinecone Configuration
      PINECONE_ENVIRONMENT: ${PINECONE_ENVIRONMENT:-gcp-starter}
      PINECONE_INDEX_NAME: ${PINECONE_INDEX_NAME:-aura-documents}
      
      # App Configuration
      MAX_FILE_SIZE_MB: 50
      CHUNK_SIZE: 1000
      CHUNK_OVERLAP: 200
      
      # CORS
      ALLOWED_ORIGINS: '["http://localhost:3000","http://127.0.0.1:3000"]'
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
    restart: unless-stopped

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: aura-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  default:
    name: aura-network